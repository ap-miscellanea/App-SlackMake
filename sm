#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
SlackMake->run;


package SlackMake;
use App::Cmd::Setup -app;
use Cwd ();
use File::Spec::Functions qw( splitpath catfile );
sub default_command { 'mk' }
sub global_opt_spec {
	my $self = shift;
	my $cwd = Cwd::getcwd();
	my $release = $ENV{ SLAKMK_USE_RELEASE } // ( splitpath $cwd )[2];
	$release .= '-0.nover' if $release !~ /-./;
	my ( $dist_name ) = $release =~ /(.*)-./;
	[ 'verbose|v!'       => 'print commands before running them' ],
	[ 'dry-run|n!'       => 'do not run commands (implies --verbose)', { implies => 'verbose' } ],
	[ 'dist-release|R=s' => 'set the project name', { default => $release } ],
	[ 'pkg-ver=s'        => 'set the package version', { default => 1 } ],
	[ 'pkg-arch=s'       => 'set the package architecture', { default => do { chomp( $_ = qx/arch/ ); $_ } } ],
	[ 'cwd'              => 'hidden', { default => $cwd } ],
	[ 'dist-name'        => 'hidden', { default => $dist_name } ]
}
sub is_dryrun    { shift->global_options->{ dry_run } }
sub is_verbose   { shift->global_options->{ verbose } }
sub dist_release { shift->global_options->{ dist_release } }
sub dist_name    { shift->global_options->{ dist_name } }
sub initial_wd   { shift->global_options->{ cwd } }
sub pkg_filename {
	my $self = shift;
	my $basename = join '-', @{ $self->global_options }{ qw( dist_release pkg_arch pkg_ver ) };
	return catfile $self->initial_wd, "$basename.txz"
}


package SlackMake::Command;
use App::Cmd::Setup -command;
sub run_command {
	my $self = shift;
	if ( $self->app->is_verbose ) {
		my @cmd = @_;
		s!'!'\\''!g or /[ \t\n]/ and $_ = "'$_'" for @cmd;
		my $out = "@cmd";
		if ( not $self->app->is_dryrun ) { eval {
			require Term::ANSIColor;
			$out = Term::ANSIColor::colored( $out, 'bold' );
		} }
		say $out;
	}
	return 1 if $self->app->is_dryrun;
	return system( @_ ) == 0;
}


package SlackMake::Command::RunSingleCommand;
use parent -norequire => 'SlackMake::Command';
sub command_names {}
sub execute {
	my $self = shift;
	$self->run_command( $self->cmd( @_ ) )
}


package SlackMake::Command::Build;
use parent -norequire => 'SlackMake::Command::RunSingleCommand';
sub command_names { 'mk' }
sub abstract { 'build distribution' }
sub cmd { @{$_[2]} ? @{$_[2]} : 'make' }


package SlackMake::Command::InstallPackage;
use parent -norequire => 'SlackMake::Command::RunSingleCommand';
sub command_names { qw( ins i ) }
sub abstract { 'install package (or upgrade if already installed)' }
sub cmd { upgradepkg => '--install-new' => '--reinstall' => shift->app->pkg_filename }


package SlackMake::Command::DeletePackage;
use parent -norequire => 'SlackMake::Command::RunSingleCommand';
sub command_names { 'rm' }
sub abstract { 'delete created package' }
sub cmd { rm => shift->app->pkg_filename }


package SlackMake::Command::Configure;
use parent -norequire => 'SlackMake::Command::RunSingleCommand';
sub command_names {}
sub opt_spec {
	[ 'configure|x=s' => 'specify the configure command to use', { default => './configure' } ],
}
sub cmd {
	my $self = shift;
	my ( $opt, $args ) = @_;
	( $opt->{ configure }, $self->configure_args( $opt ), @$args );
}


package SlackMake::Command::Configure::Help;
use parent -norequire => 'SlackMake::Command::Configure';
sub command_names { 'ch' }
sub abstract { 'configure --help' }
sub configure_args { '--help' }


package SlackMake::Command::Configure::Plain;
use parent -norequire => 'SlackMake::Command::Configure';
sub command_names { 'cn' }
sub abstract { 'configure with no defaults' }
use File::Spec::Functions qw( catdir );
sub opt_spec {
	my $self = shift;
	$self->SUPER::opt_spec,
	[ 'enable|E=s@'      => 'features to translate to --enable-foo options' ],
	[ 'disable|D=s@'     => 'features to translate to --disable-foo options' ],
	[ 'with|W=s@'        => 'packages to translate to --with-foo options' ],
	[ 'without|O=s@'     => 'packages to translate to --without-foo options' ],
}
sub configure_args {
	my $self = shift;
	my ( $opt ) = @_;
	my $parse_features = qr/\G ,? ( .+? (?: =.* \z )? ) (?: (?=,) | \z ) /x;
	( map "--enable-$_",  map /$parse_features/g, @{ $opt->{ enable } } ),
	( map "--disable-$_", map /$parse_features/g, @{ $opt->{ disable } } ),
	( map "--with-$_",    map /$parse_features/g, @{ $opt->{ with } } ),
	( map "--without-$_", map /$parse_features/g, @{ $opt->{ without } } ),
}


package SlackMake::Command::Configure::WithDefaults;
use parent -norequire => 'SlackMake::Command::Configure::Plain';
sub command_names { 'cf' }
sub abstract { 'configure with defaults' }
use File::Spec::Functions qw( catdir );
sub local_opt_spec {
	[ 'prefix=s'         => 'override prefix default',         { default => '/usr' } ],
	[ 'sysconfdir=s'     => 'override sysconfdir default',     { default => sub { catdir '/etc', shift->app->dist_name } } ],
	[ 'sharedstatedir=s' => 'override sharedstatedir default', { default => '/var/com' } ],
	[ 'localstatedir=s'  => 'override localstatedir default',  { default => '/var' } ],
	[ 'mandir=s'         => 'override mandir default',         { default => '/usr/man' } ],
	[ 'docdir=s'         => 'override docdir default',         { default => sub { catdir '/usr/doc', shift->app->dist_release } } ],
}
sub opt_spec { map { $_->SUPER::opt_spec, $_->local_opt_spec } shift }
sub configure_args {
	my $self = shift;
	my ( $opt ) = @_;
	my @autoconf_opt = map { $_->[0] =~ /(.*)=s\z/ } $self->local_opt_spec;
	$_ = $_->( $self ) for grep { ref } @{ $opt }{ @autoconf_opt };
	return (
		map ( "--$_=$opt->{$_}", grep { length $opt->{ $_ } } @autoconf_opt ),
		$self->SUPER::configure_args( @_ ),
	);
}


package SlackMake::Command::CreatePackage;
use parent -norequire => 'SlackMake::Command';
sub command_names { qw( pkg p ) }
sub abstract { 'create package' }
sub opt_spec {
	[ 'docs|d!'     => 'specify that command line starts with "--"-terminated list of files to copy to /usr/doc' ],
	[ 'postcmd|p=s' => 'shell commands to run before package creation (will run inside the package tree)' ],
}
use File::Spec::Functions qw( catdir catfile tmpdir no_upwards );
sub execute {
	my $self = shift;
	my ( $opt, $args ) = @_;
	my $is_dryrun = $self->app->is_dryrun;

	unless ( $is_dryrun or $< == 0 ) {
		print STDERR "Creating package as non-root. Continue (y/n)? ";
		return unless <STDIN> =~ /^\s*y/i;
	}

	my $tmpdir = $is_dryrun
		? '$TMPDIR'
		: do {
			require File::Temp;
			File::Temp::mkdtemp( catdir tmpdir, 'slakmk.XXXXXXXX' );
		};

	chmod 0755, $tmpdir unless $is_dryrun;

	my @doc;
	if ( $opt->{ docs } ) {
		my $file;
		push @doc, $file while @$args and '--' ne ( $file = shift @$args );
	}

	my @cmd = @$args ? @$args : qw( make install DESTDIR=%d/ );

	s/ \G ( %(.) | . ) /
		( !defined $2 ) ? $1      :
		$2 eq '%'       ? '%'     :
		$2 eq 'd'       ? $tmpdir :
		do { warn "Unknown format sequence '$1', ignoring\n"; '' }
	/xge for @cmd;

	$self->run_command( @cmd );

	my $doc_dir = catdir( $tmpdir, 'usr', 'doc', $self->app->dist_release );
	if ( @doc ) {
		$self->run_command( mkdir => -p => $doc_dir );
		$self->run_command( cp => -a => @doc, $doc_dir );
	}

	my $sharedoc_dir = catdir $tmpdir, qw( usr share doc ), $self->app->dist_name;
	if ( opendir my $dh, $sharedoc_dir ) {
		$self->run_command( mv => ( map { catfile $sharedoc_dir, $_ } no_upwards readdir $dh ), $doc_dir );
	}

	chdir $tmpdir unless $is_dryrun;

	if ( my $sh = $opt->{ postcmd } ) {
		$self->run_command( sh => -c => $sh );
	}

	my $success = $self->run_command( makepkg => -c => 'n', -l => 'y', $self->app->pkg_filename );

	chdir $self->app->initial_wd unless $is_dryrun;

	$self->run_command( rm => -rf => $tmpdir );

	return $success;
}
